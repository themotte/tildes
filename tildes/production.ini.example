[DEFAULT]

[app:main]
use = egg:tildes

redis.unix_socket_path = /run/redis/socket

redis.sessions.secret = SomeReallyLongSecret
redis.sessions.unix_socket_path = %(redis.unix_socket_path)s
redis.sessions.prefix = session:
redis.sessions.cookie_secure = true
redis.sessions.cookie_max_age = 31536000

# disable the python timeout management in pyramid-session-redis
redis.sessions.python_expires = false
redis.sessions.timeout_trigger = 0

# set session timeout to 1 hour by default, we'll extend it when people log in
redis.sessions.timeout = 3600

# uncomment and set this if you have a Sentry instance you want to send errors to
# sentry_dsn = https://key@sentry.io/project

sqlalchemy.url = postgresql+psycopg2://tildes:@:6432/tildes

stripe.recurring_donation_product_id = prod_ProductID

tildes.default_user_comment_label_weight = 1.0
tildes.open_registration = true

# Path to the file to use to check for passwords that have been in data breaches, which
# users will be prevented from using as their password. It's recommended to use the
# "Pwned Passwords" list downloaded from https://haveibeenpwned.com/passwords (must be
# the SHA-1 format, "ordered by hash" one), but you can use any file with a compatible
# format: each line starting with a single uppercase SHA-1 hash of a password to block,
# with the entire file sorted in lexographical order.
# Leave this line commented out to allow all passwords.
# tildes.breached_passwords_hash_file_path = /opt/tildes/pwned-passwords-sha1-ordered-by-hash-v6.txt

webassets.auto_build = false
webassets.base_dir = %(here)s/static
webassets.base_url = /
webassets.cache = false
webassets.manifest = json

# API keys for external APIs
api_keys.embedly = embedlykeygoeshere
api_keys.stripe.publishable = pk_live_ActualKeyShouldGoHere
api_keys.stripe.secret = sk_live_ActualKeyShouldGoHere
api_keys.youtube = youtubekeygoeshere
